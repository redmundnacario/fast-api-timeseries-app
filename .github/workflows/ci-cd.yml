name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      RELEASE_VERSION:
        description: 'Release version for deployment'
        required: false
        default: ''

env:
  APP_VERSION: ${{ github.event.inputs.RELEASE_VERSION || 'latest' }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Create .env.prd file with secrets
        run: |
          # Create the .env.prd file
          touch backend/.env.prd

          # Write each DEV_APP secret to the .env.prd file
          echo "DB_NAME=${{ secrets.DEV_APP_DB_NAME }}" >> backend/.env.prd
          echo "DB_USERNAME=${{ secrets.DEV_APP_DB_USERNAME }}" >> backend/.env.prd
          echo "DB_PASSWORD=${{ secrets.DEV_APP_DB_PASSWORD}}" >> backend/.env.prd
          echo "DB_HOST=${{ secrets.DEV_APP_DB_HOST }}" >> backend/.env.prd
          echo "DB_PORT=${{ secrets.DEV_APP_DB_PORT }}" >> backend/.env.prd
          echo "APP_VERSION=${{ env._DEV_APP_VERSION }}" >> backend/.env.prd

          cp backend/.env.prd backend/.env

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          cd backend
          pytest

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env.prd file with secrets
        run: |
          # Create the .env.prd file
          touch backend/.env.prd

          # Write each DEV_APP secret to the .env.prd file
          echo "DB_NAME=${{ secrets.DEV_APP_DB_NAME }}" >> backend/.env.prd
          echo "DB_USERNAME=${{ secrets.DEV_APP_DB_USERNAME }}" >> backend/.env.prd
          echo "DB_PASSWORD=${{ secrets.DEV_APP_DB_PASSWORD}}" >> backend/.env.prd
          echo "DB_HOST=${{ secrets.DEV_APP_DB_HOST }}" >> backend/.env.prd
          echo "DB_PORT=${{ secrets.DEV_APP_DB_PORT }}" >> backend/.env.prd
          echo "APP_VERSION=${{ env.DEV_APP_VERSION }}" >> backend/.env.prd

          cp backend/.env.prd backend/.env

      - name: Build Docker image
        run: |
          cd backend
          docker compose -f production.yml build
          docker tag observations_rest:latest myapp:${{ env.APP_VERSION }}
          docker save myapp:${{ env.APP_VERSION }} -o myapp-image.tar

      - name: Save Docker image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: backend/myapp-image.tar

  pre-deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event.inputs.RELEASE_VERSION != ''

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Load Docker image
        run: |
          docker load -i myapp-image.tar

      - name: Tag Docker image for ECR
        run: |
          docker tag myapp:${{env.APP_VERSION}} "${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/myapp:${{env.APP_VERSION}}"
      
      - name: Push Docker image to ECR
        run: |
          docker push "${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/myapp:${{env.APP_VERSION}}"

  deploy:
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: github.ref == 'refs/heads/main' && github.event.inputs.RELEASE_VERSION != ''
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Register new ECS task definition
        run: |
          TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
            --family my-task-family \
            --execution-role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole \
            --cpu "256" \
            --memory "512" \
            --network-mode "awsvpc" \
            --requires-compatibilities "FARGATE" \
            --container-definitions '[
              {
                "name": "my-container",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/myapp:${{env.APP_VERSION}}",
                "cpu": 256,
                "memory": 512,
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 8000,
                    "hostPort": 8000,
                    "protocol": "tcp"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/my-log-group",
                    "awslogs-region": "${{ secrets.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]' \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "TASK_DEFINITION_ARN=${TASK_DEFINITION_ARN}" >> $GITHUB_ENV

      - name: Deploy to ECS
        run: |
          # Update the ECS service to use the new task definition revision
          echo "Deploying with task definition ARN: ${{ env.TASK_DEFINITION_ARN }}"
          aws ecs update-service \
            --cluster "github-demo-cluster-1" \
            --service "fast-api-service-1" \
            --task-definition ${{ env.TASK_DEFINITION_ARN }} \
            --force-new-deployment

