name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # test:
  #   runs-on: ubuntu-latest

  #   services:
  #     postgres:
  #       image: postgres:latest
  #       env:
  #         POSTGRES_DB: dbname
  #         POSTGRES_USER: user
  #         POSTGRES_PASSWORD: password
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd="pg_isready -U ${{ secrets.POSTGRES_USER }}" 
  #         --health-interval=10s 
  #         --health-timeout=5s 
  #         --health-retries=5

  #   env:
  #     DATABASE_URL: postgresql://user:password@localhost/dbname

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.11'

  #     - name: Install dependencies
  #       run: |
  #         cd backend
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt

  #     - name: Run tests
  #       run: |
  #         cd backend
  #         pytest

  build:
    runs-on: ubuntu-latest
    # needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t myapp:${{ github.sha }} ./backend

      - name: Save Docker image to TAR
        run: |
          docker save myapp:${{ github.sha }} -o docker_image.tar

      - name: Save Docker image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: docker_image.tar

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     - name: Download Docker image artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: docker-image

  #     - name: Load Docker image from TAR
  #       run: |
  #         docker load -i docker_image.tar

  #     - name: Deploy to ECS
  #       run: |
  #         # Use the loaded image for deployment
  #         aws ecs update-service --cluster my-cluster --service my-service --force-new-deployment
